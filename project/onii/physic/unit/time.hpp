#ifndef ONII_PHYSIC_UNIT_TIME_HPP
#define ONII_PHYSIC_UNIT_TIME_HPP

/////////////////////////////////////////////////
/// @file onii/physic/unit/time.hpp
/////////////////////////////////////////////////

#include "detail/unit_base.hpp"

/////////////////////////////////////////////////
/// @namespace onii
/////////////////////////////////////////////////
namespace onii
{
/////////////////////////////////////////////////
/// @namespace onii::physic
/////////////////////////////////////////////////
namespace physic
{
/////////////////////////////////////////////////
/// @namespace onii::physic::unit
/////////////////////////////////////////////////
namespace unit
{
/////////////////////////////////////////////////
/// @class time
/////////////////////////////////////////////////
class time :
    public detail::unit_base<time, float>
{
public:

    /////////////////////////////////////////////////
    /// @brief Time type
    /////////////////////////////////////////////////
    typedef float time_type;

    /////////////////////////////////////////////////
    /// @brief Constructor
    ///
    /// @param second - the time in seconds
    /////////////////////////////////////////////////
    time(time_type second = 0.f) :
        unit_base(second)
    {}

    /////////////////////////////////////////////////
    /// @brief Get the time in milliseconds
    ///
    /// @return The time in milliseconds
    /////////////////////////////////////////////////
    time_type ms() const
    {
        return s() * 1000.f;
    }

    /////////////////////////////////////////////////
    /// @brief Get the time in seconds
    ///
    /// @return The time in seconds
    /////////////////////////////////////////////////
    time_type s() const
    {
        return m_value;
    }

    /////////////////////////////////////////////////
    /// @brief Get the time in minuts
    ///
    /// @return The time in minuts
    /////////////////////////////////////////////////
    time_type min() const
    {
        return s() / 60.f;
    }

    /////////////////////////////////////////////////
    /// @brief Create a time instance from milliseconds
    ///
    /// @param millisecond - the time in milliseconds
    /// @return The new time instance
    /////////////////////////////////////////////////
    static time ms(time_type millisecond)
    {
        return s(millisecond / 1000.f);
    }

    /////////////////////////////////////////////////
    /// @brief Create a time instance from seconds
    ///
    /// @param second - the time in seconds
    /// @return The new time instance
    /////////////////////////////////////////////////
    static time s(time_type second)
    {
        return {second};
    }

    /////////////////////////////////////////////////
    /// @brief Create a time instance from minuts
    ///
    /// @param minute - the time in minuts
    /// @return The new time instance
    /////////////////////////////////////////////////
    static time min(time_type minute)
    {
        return s(minute * 60.f);
    }
};
} // namespace unit
} // namespace physic
} // namespace onii

#endif // ONII_PHYSIC_UNIT_TIME_HPP
